// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(b=instruction, a=aluout, sel=avalue, out=ain);
    ARegister(in=ain, load=aregister, out=aout, out[0..14]=addressM);

    Or(a=avalue, b=instruction[5], out=aregister);
    Not(in=instruction[15], out=avalue);
    And(a=instruction[15], b=instruction[4], out=dregister);

    Mux16(a=aout, b=inM, sel=instruction[12], out=operator);

    PC(in=aout, load=pcload, inc=true, reset=reset, out[0..14]=pc);

    DRegister(in=aluout, load=dregister, out=dout);

    ALU(x=dout, y=operator, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
    ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=EQ, ng=LT);

    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    Not(in=EQ, out=NE);
    Not(in=LT, out=GE);
    And(a=GE, b=NE, out=GT);
    Or(a=LT, b=EQ, out=LE);

    DMux8Way(in=true, sel=instruction[0..2], a=JNULL, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

    And(a=GT, b=JGT, out=GTT);
    And(a=EQ, b=JEQ, out=EQQ);
    And(a=GE, b=JGE, out=GEE);
    And(a=LT, b=JLT, out=LTT);
    And(a=NE, b=JNE, out=NEE);
    And(a=LE, b=JLE, out=LEE);
    And(a=true, b=JMP, out=JMPP);

    Or8Way(in[0]=false, in[1]=GTT, in[2]=EQQ, in[3]=GEE, in[4]=LTT, in[5]=NEE, in[6]=LEE, in[7]=JMPP, out=pcl);
    And(a=instruction[15], b=pcl, out=pcload);


}